// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using quickOS.Infra.Persistence;

#nullable disable

namespace quickOS.Infra.Persistence.Migrations
{
    [DbContext(typeof(QuickOSDbContext))]
    [Migration("20240516224511_SeedUnitsOfMeasurement")]
    partial class SeedUnitsOfMeasurement
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("quickOS.Core.Entities.ServiceProvided", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Code")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<double>("Price")
                        .HasPrecision(10, 2)
                        .HasColumnType("double precision");

                    b.Property<int>("TenantId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ExternalId")
                        .IsUnique();

                    b.HasIndex("TenantId");

                    b.HasIndex("Code", "TenantId")
                        .IsUnique();

                    b.ToTable("ServicesProvided");
                });

            modelBuilder.Entity("quickOS.Core.Entities.Tenant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ExternalId")
                        .IsUnique();

                    b.ToTable("Tenants");
                });

            modelBuilder.Entity("quickOS.Core.Entities.UnitOfMeasurement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Abbreviation")
                        .IsUnique();

                    b.HasIndex("ExternalId")
                        .IsUnique();

                    b.ToTable("UnitsOfMeasurement");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Abbreviation = "un",
                            CreatedAt = new DateTime(2024, 5, 16, 22, 45, 11, 226, DateTimeKind.Utc).AddTicks(6629),
                            ExternalId = new Guid("b25719f0-d241-45c3-b72b-15524a02d26e"),
                            IsActive = true,
                            Name = "Unidade",
                            UpdatedAt = new DateTime(2024, 5, 16, 22, 45, 11, 226, DateTimeKind.Utc).AddTicks(6630)
                        },
                        new
                        {
                            Id = 2,
                            Abbreviation = "pç",
                            CreatedAt = new DateTime(2024, 5, 16, 22, 45, 11, 226, DateTimeKind.Utc).AddTicks(6639),
                            ExternalId = new Guid("d0505db2-a3ed-4e3e-943a-61df332631d1"),
                            IsActive = true,
                            Name = "Peça",
                            UpdatedAt = new DateTime(2024, 5, 16, 22, 45, 11, 226, DateTimeKind.Utc).AddTicks(6640)
                        },
                        new
                        {
                            Id = 3,
                            Abbreviation = "cx",
                            CreatedAt = new DateTime(2024, 5, 16, 22, 45, 11, 226, DateTimeKind.Utc).AddTicks(6648),
                            ExternalId = new Guid("1756d900-d234-4777-bcf0-86a72ea0f1cc"),
                            IsActive = true,
                            Name = "Caixa",
                            UpdatedAt = new DateTime(2024, 5, 16, 22, 45, 11, 226, DateTimeKind.Utc).AddTicks(6648)
                        },
                        new
                        {
                            Id = 4,
                            Abbreviation = "pa",
                            CreatedAt = new DateTime(2024, 5, 16, 22, 45, 11, 226, DateTimeKind.Utc).AddTicks(6656),
                            ExternalId = new Guid("586762f7-90d5-4821-b1cc-a0679917fe6d"),
                            IsActive = true,
                            Name = "Par",
                            UpdatedAt = new DateTime(2024, 5, 16, 22, 45, 11, 226, DateTimeKind.Utc).AddTicks(6656)
                        },
                        new
                        {
                            Id = 5,
                            Abbreviation = "cm",
                            CreatedAt = new DateTime(2024, 5, 16, 22, 45, 11, 226, DateTimeKind.Utc).AddTicks(6663),
                            ExternalId = new Guid("c0ef61a9-fdf1-4b8e-89f5-7882e2ffc1fa"),
                            IsActive = true,
                            Name = "Centímetro",
                            UpdatedAt = new DateTime(2024, 5, 16, 22, 45, 11, 226, DateTimeKind.Utc).AddTicks(6664)
                        },
                        new
                        {
                            Id = 6,
                            Abbreviation = "m",
                            CreatedAt = new DateTime(2024, 5, 16, 22, 45, 11, 226, DateTimeKind.Utc).AddTicks(6671),
                            ExternalId = new Guid("ccdfb575-2492-441f-83fb-5047c1d34a0c"),
                            IsActive = true,
                            Name = "Metro",
                            UpdatedAt = new DateTime(2024, 5, 16, 22, 45, 11, 226, DateTimeKind.Utc).AddTicks(6671)
                        },
                        new
                        {
                            Id = 7,
                            Abbreviation = "g",
                            CreatedAt = new DateTime(2024, 5, 16, 22, 45, 11, 226, DateTimeKind.Utc).AddTicks(6679),
                            ExternalId = new Guid("30a78d4e-62b6-42d5-95fe-4f5ee0cb0257"),
                            IsActive = true,
                            Name = "Grama",
                            UpdatedAt = new DateTime(2024, 5, 16, 22, 45, 11, 226, DateTimeKind.Utc).AddTicks(6679)
                        },
                        new
                        {
                            Id = 8,
                            Abbreviation = "kg",
                            CreatedAt = new DateTime(2024, 5, 16, 22, 45, 11, 226, DateTimeKind.Utc).AddTicks(6686),
                            ExternalId = new Guid("9b485104-de70-4964-8b64-dae14a085b97"),
                            IsActive = true,
                            Name = "Quilograma",
                            UpdatedAt = new DateTime(2024, 5, 16, 22, 45, 11, 226, DateTimeKind.Utc).AddTicks(6687)
                        },
                        new
                        {
                            Id = 9,
                            Abbreviation = "ml",
                            CreatedAt = new DateTime(2024, 5, 16, 22, 45, 11, 226, DateTimeKind.Utc).AddTicks(6694),
                            ExternalId = new Guid("97623f28-4d25-4e8c-a65b-62e219d4922b"),
                            IsActive = true,
                            Name = "Mililitro",
                            UpdatedAt = new DateTime(2024, 5, 16, 22, 45, 11, 226, DateTimeKind.Utc).AddTicks(6694)
                        },
                        new
                        {
                            Id = 10,
                            Abbreviation = "l",
                            CreatedAt = new DateTime(2024, 5, 16, 22, 45, 11, 226, DateTimeKind.Utc).AddTicks(6702),
                            ExternalId = new Guid("bb489c91-3400-4520-9033-15b7db5eb18d"),
                            IsActive = true,
                            Name = "Litro",
                            UpdatedAt = new DateTime(2024, 5, 16, 22, 45, 11, 226, DateTimeKind.Utc).AddTicks(6702)
                        });
                });

            modelBuilder.Entity("quickOS.Core.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CellPhone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character(15)")
                        .IsFixedLength();

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("uuid");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("RefreshToken")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("RefreshTokenExpiresIn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<int>("TenantId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CellPhone")
                        .IsUnique();

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("ExternalId")
                        .IsUnique();

                    b.HasIndex("RefreshToken")
                        .IsUnique();

                    b.HasIndex("TenantId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("quickOS.Core.Entities.ServiceProvided", b =>
                {
                    b.HasOne("quickOS.Core.Entities.Tenant", "Tenant")
                        .WithMany("ServicesProvided")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("quickOS.Core.Entities.User", b =>
                {
                    b.HasOne("quickOS.Core.Entities.Tenant", "Tenant")
                        .WithMany("Users")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("quickOS.Core.Entities.Tenant", b =>
                {
                    b.Navigation("ServicesProvided");

                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
